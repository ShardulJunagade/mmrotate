{"env_info": "sys.platform: linux\nPython: 3.8.20 | packaged by conda-forge | (default, Sep 30 2024, 17:52:49) [GCC 13.3.0]\nCUDA available: True\nGPU 0: NVIDIA A100-SXM4-80GB\nCUDA_HOME: /usr\nNVCC: Cuda compilation tools, release 10.1, V10.1.24\nGCC: gcc (Ubuntu 9.4.0-1ubuntu1~20.04.2) 9.4.0\nPyTorch: 1.9.0+cu111\nPyTorch compiling details: PyTorch built with:\n  - GCC 7.3\n  - C++ Version: 201402\n  - Intel(R) Math Kernel Library Version 2020.0.0 Product Build 20191122 for Intel(R) 64 architecture applications\n  - Intel(R) MKL-DNN v2.1.2 (Git Hash 98be7e8afa711dc9b66c8ff3504129cb82013cdb)\n  - OpenMP 201511 (a.k.a. OpenMP 4.5)\n  - NNPACK is enabled\n  - CPU capability usage: AVX2\n  - CUDA Runtime 11.1\n  - NVCC architecture flags: -gencode;arch=compute_37,code=sm_37;-gencode;arch=compute_50,code=sm_50;-gencode;arch=compute_60,code=sm_60;-gencode;arch=compute_70,code=sm_70;-gencode;arch=compute_75,code=sm_75;-gencode;arch=compute_80,code=sm_80;-gencode;arch=compute_86,code=sm_86\n  - CuDNN 8.0.5\n  - Magma 2.5.2\n  - Build settings: BLAS_INFO=mkl, BUILD_TYPE=Release, CUDA_VERSION=11.1, CUDNN_VERSION=8.0.5, CXX_COMPILER=/opt/rh/devtoolset-7/root/usr/bin/c++, CXX_FLAGS= -Wno-deprecated -fvisibility-inlines-hidden -DUSE_PTHREADPOOL -fopenmp -DNDEBUG -DUSE_KINETO -DUSE_FBGEMM -DUSE_QNNPACK -DUSE_PYTORCH_QNNPACK -DUSE_XNNPACK -DSYMBOLICATE_MOBILE_DEBUG_HANDLE -O2 -fPIC -Wno-narrowing -Wall -Wextra -Werror=return-type -Wno-missing-field-initializers -Wno-type-limits -Wno-array-bounds -Wno-unknown-pragmas -Wno-sign-compare -Wno-unused-parameter -Wno-unused-variable -Wno-unused-function -Wno-unused-result -Wno-unused-local-typedefs -Wno-strict-overflow -Wno-strict-aliasing -Wno-error=deprecated-declarations -Wno-stringop-overflow -Wno-psabi -Wno-error=pedantic -Wno-error=redundant-decls -Wno-error=old-style-cast -fdiagnostics-color=always -faligned-new -Wno-unused-but-set-variable -Wno-maybe-uninitialized -fno-math-errno -fno-trapping-math -Werror=format -Wno-stringop-overflow, LAPACK_INFO=mkl, PERF_WITH_AVX=1, PERF_WITH_AVX2=1, PERF_WITH_AVX512=1, TORCH_VERSION=1.9.0, USE_CUDA=ON, USE_CUDNN=ON, USE_EXCEPTION_PTR=1, USE_GFLAGS=OFF, USE_GLOG=OFF, USE_MKL=ON, USE_MKLDNN=ON, USE_MPI=OFF, USE_NCCL=ON, USE_NNPACK=ON, USE_OPENMP=ON, \n\nTorchVision: 0.10.0+cu111\nOpenCV: 4.11.0\nMMCV: 1.7.2\nMMCV Compiler: GCC 7.3\nMMCV CUDA Compiler: 11.1\nMMRotate: 0.3.4+b030f38", "config": "dataset_type = 'BrickKilnDataset'\ndata_root = '/home/shardul.junagade/my-work/domain-adaptation-brick-kilns/data/sentinel/'\nimg_norm_cfg = dict(\n    mean=[123.675, 116.28, 103.53], std=[58.395, 57.12, 57.375], to_rgb=True)\ntrain_pipeline = [\n    dict(type='LoadImageFromFile'),\n    dict(type='LoadAnnotations', with_bbox=True),\n    dict(type='RResize', img_scale=(128, 128)),\n    dict(\n        type='RRandomFlip',\n        flip_ratio=[0.25, 0.25, 0.25],\n        direction=['horizontal', 'vertical', 'diagonal'],\n        version='le90'),\n    dict(\n        type='Normalize',\n        mean=[123.675, 116.28, 103.53],\n        std=[58.395, 57.12, 57.375],\n        to_rgb=True),\n    dict(type='Pad', size_divisor=32),\n    dict(type='DefaultFormatBundle'),\n    dict(type='Collect', keys=['img', 'gt_bboxes', 'gt_labels'])\n]\ntest_pipeline = [\n    dict(type='LoadImageFromFile'),\n    dict(\n        type='MultiScaleFlipAug',\n        img_scale=(128, 128),\n        flip=False,\n        transforms=[\n            dict(type='RResize'),\n            dict(\n                type='Normalize',\n                mean=[123.675, 116.28, 103.53],\n                std=[58.395, 57.12, 57.375],\n                to_rgb=True),\n            dict(type='Pad', size_divisor=32),\n            dict(type='DefaultFormatBundle'),\n            dict(type='Collect', keys=['img'])\n        ])\n]\ndata = dict(\n    samples_per_gpu=2,\n    workers_per_gpu=2,\n    train=dict(\n        type='BrickKilnDataset',\n        ann_file=\n        '/home/shardul.junagade/my-work/domain-adaptation-brick-kilns/data/sentinel/train/annfiles/',\n        img_prefix=\n        '/home/shardul.junagade/my-work/domain-adaptation-brick-kilns/data/sentinel/train/images/',\n        pipeline=[\n            dict(type='LoadImageFromFile'),\n            dict(type='LoadAnnotations', with_bbox=True),\n            dict(type='RResize', img_scale=(128, 128)),\n            dict(\n                type='RRandomFlip',\n                flip_ratio=[0.25, 0.25, 0.25],\n                direction=['horizontal', 'vertical', 'diagonal'],\n                version='le90'),\n            dict(\n                type='Normalize',\n                mean=[123.675, 116.28, 103.53],\n                std=[58.395, 57.12, 57.375],\n                to_rgb=True),\n            dict(type='Pad', size_divisor=32),\n            dict(type='DefaultFormatBundle'),\n            dict(type='Collect', keys=['img', 'gt_bboxes', 'gt_labels'])\n        ],\n        version='le90'),\n    val=dict(\n        type='BrickKilnDataset',\n        ann_file=\n        '/home/shardul.junagade/my-work/domain-adaptation-brick-kilns/data/sentinel/train/annfiles/',\n        img_prefix=\n        '/home/shardul.junagade/my-work/domain-adaptation-brick-kilns/data/sentinel/train/images/',\n        pipeline=[\n            dict(type='LoadImageFromFile'),\n            dict(\n                type='MultiScaleFlipAug',\n                img_scale=(128, 128),\n                flip=False,\n                transforms=[\n                    dict(type='RResize'),\n                    dict(\n                        type='Normalize',\n                        mean=[123.675, 116.28, 103.53],\n                        std=[58.395, 57.12, 57.375],\n                        to_rgb=True),\n                    dict(type='Pad', size_divisor=32),\n                    dict(type='DefaultFormatBundle'),\n                    dict(type='Collect', keys=['img'])\n                ])\n        ],\n        version='le90'),\n    test=dict(\n        type='BrickKilnDataset',\n        ann_file=\n        '/home/shardul.junagade/my-work/domain-adaptation-brick-kilns/data/sentinel/test/annfiles/',\n        img_prefix=\n        '/home/shardul.junagade/my-work/domain-adaptation-brick-kilns/data/sentinel/test/images/',\n        pipeline=[\n            dict(type='LoadImageFromFile'),\n            dict(\n                type='MultiScaleFlipAug',\n                img_scale=(128, 128),\n                flip=False,\n                transforms=[\n                    dict(type='RResize'),\n                    dict(\n                        type='Normalize',\n                        mean=[123.675, 116.28, 103.53],\n                        std=[58.395, 57.12, 57.375],\n                        to_rgb=True),\n                    dict(type='Pad', size_divisor=32),\n                    dict(type='DefaultFormatBundle'),\n                    dict(type='Collect', keys=['img'])\n                ])\n        ],\n        version='le90'))\nevaluation = dict(interval=1, metric='mAP')\noptimizer = dict(type='SGD', lr=0.005, momentum=0.9, weight_decay=0.0001)\noptimizer_config = dict(grad_clip=dict(max_norm=35, norm_type=2))\nlr_config = dict(\n    policy='step',\n    warmup='linear',\n    warmup_iters=500,\n    warmup_ratio=0.3333333333333333,\n    step=[8, 11])\nrunner = dict(type='EpochBasedRunner', max_epochs=12)\ncheckpoint_config = dict(interval=1)\nlog_config = dict(interval=50, hooks=[dict(type='TextLoggerHook')])\ndist_params = dict(backend='nccl')\nlog_level = 'INFO'\nload_from = None\nresume_from = None\nworkflow = [('train', 1)]\nopencv_num_threads = 0\nmp_start_method = 'fork'\nangle_version = 'le90'\nmodel = dict(\n    type='OrientedRCNN',\n    backbone=dict(\n        type='ResNet',\n        depth=50,\n        num_stages=4,\n        out_indices=(0, 1, 2, 3),\n        frozen_stages=1,\n        norm_cfg=dict(type='BN', requires_grad=True),\n        norm_eval=True,\n        style='pytorch',\n        init_cfg=dict(type='Pretrained', checkpoint='torchvision://resnet50')),\n    neck=dict(\n        type='FPN',\n        in_channels=[256, 512, 1024, 2048],\n        out_channels=256,\n        num_outs=5),\n    rpn_head=dict(\n        type='OrientedRPNHead',\n        in_channels=256,\n        feat_channels=256,\n        version='le90',\n        anchor_generator=dict(\n            type='AnchorGenerator',\n            scales=[8],\n            ratios=[0.5, 1.0, 2.0],\n            strides=[4, 8, 16, 32, 64]),\n        bbox_coder=dict(\n            type='MidpointOffsetCoder',\n            angle_range='le90',\n            target_means=[0.0, 0.0, 0.0, 0.0, 0.0, 0.0],\n            target_stds=[1.0, 1.0, 1.0, 1.0, 0.5, 0.5]),\n        loss_cls=dict(\n            type='CrossEntropyLoss', use_sigmoid=True, loss_weight=1.0),\n        loss_bbox=dict(\n            type='SmoothL1Loss', beta=0.1111111111111111, loss_weight=1.0)),\n    roi_head=dict(\n        type='OrientedStandardRoIHead',\n        bbox_roi_extractor=dict(\n            type='RotatedSingleRoIExtractor',\n            roi_layer=dict(\n                type='RoIAlignRotated',\n                out_size=7,\n                sample_num=2,\n                clockwise=True),\n            out_channels=256,\n            featmap_strides=[4, 8, 16, 32]),\n        bbox_head=dict(\n            type='RotatedShared2FCBBoxHead',\n            in_channels=256,\n            fc_out_channels=1024,\n            roi_feat_size=7,\n            num_classes=3,\n            bbox_coder=dict(\n                type='DeltaXYWHAOBBoxCoder',\n                angle_range='le90',\n                norm_factor=None,\n                edge_swap=True,\n                proj_xy=True,\n                target_means=(0.0, 0.0, 0.0, 0.0, 0.0),\n                target_stds=(0.1, 0.1, 0.2, 0.2, 0.1)),\n            reg_class_agnostic=True,\n            loss_cls=dict(\n                type='CrossEntropyLoss', use_sigmoid=False, loss_weight=1.0),\n            loss_bbox=dict(type='SmoothL1Loss', beta=1.0, loss_weight=1.0))),\n    train_cfg=dict(\n        rpn=dict(\n            assigner=dict(\n                type='MaxIoUAssigner',\n                pos_iou_thr=0.7,\n                neg_iou_thr=0.3,\n                min_pos_iou=0.3,\n                match_low_quality=True,\n                ignore_iof_thr=-1),\n            sampler=dict(\n                type='RandomSampler',\n                num=256,\n                pos_fraction=0.5,\n                neg_pos_ub=-1,\n                add_gt_as_proposals=False),\n            allowed_border=0,\n            pos_weight=-1,\n            debug=False),\n        rpn_proposal=dict(\n            nms_pre=2000,\n            max_per_img=2000,\n            nms=dict(type='nms', iou_threshold=0.8),\n            min_bbox_size=0),\n        rcnn=dict(\n            assigner=dict(\n                type='MaxIoUAssigner',\n                pos_iou_thr=0.5,\n                neg_iou_thr=0.5,\n                min_pos_iou=0.5,\n                match_low_quality=False,\n                iou_calculator=dict(type='RBboxOverlaps2D'),\n                ignore_iof_thr=-1),\n            sampler=dict(\n                type='RRandomSampler',\n                num=512,\n                pos_fraction=0.25,\n                neg_pos_ub=-1,\n                add_gt_as_proposals=True),\n            pos_weight=-1,\n            debug=False)),\n    test_cfg=dict(\n        rpn=dict(\n            nms_pre=2000,\n            max_per_img=2000,\n            nms=dict(type='nms', iou_threshold=0.8),\n            min_bbox_size=0),\n        rcnn=dict(\n            nms_pre=2000,\n            min_bbox_size=0,\n            score_thr=0.05,\n            nms=dict(iou_thr=0.1),\n            max_per_img=2000)))\nwork_dir = './work_dirs/oriented_rcnn_r50_fpn_1x_brickkiln_le90'\nauto_resume = False\ngpu_ids = range(0, 1)\n", "seed": 0, "exp_name": "oriented_rcnn_r50_fpn_1x_brickkiln_le90.py"}
{"mode": "train", "epoch": 1, "iter": 50, "lr": 0.00199, "memory": 838, "data_time": 0.04704, "loss_rpn_cls": 0.12869, "loss_rpn_bbox": 0.00028, "loss_cls": 0.13592, "acc": 97.05859, "loss_bbox": 0.00736, "loss": 0.27225, "grad_norm": 5.93469, "time": 0.23945}
{"mode": "train", "epoch": 1, "iter": 100, "lr": 0.00233, "memory": 838, "data_time": 0.00239, "loss_rpn_cls": 0.00048, "loss_rpn_bbox": 0.0, "loss_cls": 0.01981, "acc": 99.66602, "loss_bbox": 0.00099, "loss": 0.02128, "grad_norm": 0.76568, "time": 0.07393}
{"mode": "train", "epoch": 1, "iter": 150, "lr": 0.00266, "memory": 838, "data_time": 0.00232, "loss_rpn_cls": 0.01569, "loss_rpn_bbox": 0.00295, "loss_cls": 0.04048, "acc": 99.56445, "loss_bbox": 0.00143, "loss": 0.06055, "grad_norm": 1.46086, "time": 0.07203}
{"mode": "train", "epoch": 1, "iter": 200, "lr": 0.00299, "memory": 838, "data_time": 0.00218, "loss_rpn_cls": 0.00748, "loss_rpn_bbox": 0.00198, "loss_cls": 0.22691, "acc": 99.59766, "loss_bbox": 0.00481, "loss": 0.24119, "grad_norm": 1.63297, "time": 0.07383}
{"mode": "val", "epoch": 1, "iter": 454, "lr": 0.00317, "mAP": 3e-05}
{"mode": "train", "epoch": 2, "iter": 50, "lr": 0.00351, "memory": 838, "data_time": 0.04554, "loss_rpn_cls": 0.01098, "loss_rpn_bbox": 0.0029, "loss_cls": 0.0629, "acc": 99.57227, "loss_bbox": 0.00347, "loss": 0.08025, "grad_norm": 0.98596, "time": 0.12062}
{"mode": "train", "epoch": 2, "iter": 100, "lr": 0.00384, "memory": 838, "data_time": 0.00253, "loss_rpn_cls": 4e-05, "loss_rpn_bbox": 0.0, "loss_cls": 0.03066, "acc": 99.59961, "loss_bbox": 0.00402, "loss": 0.03471, "grad_norm": 0.76457, "time": 0.07708}
{"mode": "train", "epoch": 2, "iter": 150, "lr": 0.00417, "memory": 838, "data_time": 0.00257, "loss_rpn_cls": 0.00816, "loss_rpn_bbox": 0.00141, "loss_cls": 0.02629, "acc": 99.62695, "loss_bbox": 0.00249, "loss": 0.03835, "grad_norm": 1.09539, "time": 0.07614}
{"mode": "train", "epoch": 2, "iter": 200, "lr": 0.00451, "memory": 838, "data_time": 0.00273, "loss_rpn_cls": 0.00142, "loss_rpn_bbox": 0.0, "loss_cls": 0.0171, "acc": 99.58594, "loss_bbox": 0.00133, "loss": 0.01986, "grad_norm": 0.58536, "time": 0.07916}
{"mode": "val", "epoch": 2, "iter": 454, "lr": 0.00469, "mAP": 0.00275}
{"mode": "train", "epoch": 3, "iter": 50, "lr": 0.005, "memory": 838, "data_time": 0.04612, "loss_rpn_cls": 0.00471, "loss_rpn_bbox": 0.0005, "loss_cls": 0.0114, "acc": 99.68359, "loss_bbox": 0.00098, "loss": 0.01759, "grad_norm": 0.46889, "time": 0.12346}
{"mode": "train", "epoch": 3, "iter": 100, "lr": 0.005, "memory": 838, "data_time": 0.00256, "loss_rpn_cls": 0.00422, "loss_rpn_bbox": 0.00052, "loss_cls": 0.01084, "acc": 99.73438, "loss_bbox": 0.00091, "loss": 0.01649, "grad_norm": 0.59791, "time": 0.07976}
{"mode": "train", "epoch": 3, "iter": 150, "lr": 0.005, "memory": 838, "data_time": 0.0065, "loss_rpn_cls": 0.0003, "loss_rpn_bbox": 0.0, "loss_cls": 0.01151, "acc": 99.64258, "loss_bbox": 0.00605, "loss": 0.01786, "grad_norm": 0.56836, "time": 0.08416}
{"mode": "train", "epoch": 3, "iter": 200, "lr": 0.005, "memory": 838, "data_time": 0.00262, "loss_rpn_cls": 0.00202, "loss_rpn_bbox": 0.00034, "loss_cls": 0.01211, "acc": 99.58789, "loss_bbox": 0.00687, "loss": 0.02133, "grad_norm": 0.62518, "time": 0.07784}
{"mode": "val", "epoch": 3, "iter": 454, "lr": 0.005, "mAP": 0.00758}
{"mode": "train", "epoch": 4, "iter": 50, "lr": 0.005, "memory": 838, "data_time": 0.04632, "loss_rpn_cls": 0.0081, "loss_rpn_bbox": 0.00164, "loss_cls": 0.0066, "acc": 99.83203, "loss_bbox": 0.00188, "loss": 0.01822, "grad_norm": 0.40939, "time": 0.12084}
{"mode": "train", "epoch": 4, "iter": 100, "lr": 0.005, "memory": 838, "data_time": 0.00251, "loss_rpn_cls": 0.00065, "loss_rpn_bbox": 0.0, "loss_cls": 0.0136, "acc": 99.67773, "loss_bbox": 0.00556, "loss": 0.01982, "grad_norm": 0.64582, "time": 0.07779}
{"mode": "train", "epoch": 4, "iter": 150, "lr": 0.005, "memory": 838, "data_time": 0.00257, "loss_rpn_cls": 0.00139, "loss_rpn_bbox": 0.00022, "loss_cls": 0.01142, "acc": 99.67383, "loss_bbox": 0.00835, "loss": 0.02139, "grad_norm": 0.45516, "time": 0.08051}
{"mode": "train", "epoch": 4, "iter": 200, "lr": 0.005, "memory": 838, "data_time": 0.00263, "loss_rpn_cls": 0.00014, "loss_rpn_bbox": 0.0, "loss_cls": 0.01274, "acc": 99.59961, "loss_bbox": 0.01574, "loss": 0.02862, "grad_norm": 0.49683, "time": 0.07961}
{"mode": "val", "epoch": 4, "iter": 454, "lr": 0.005, "mAP": 0.02972}
{"mode": "train", "epoch": 5, "iter": 50, "lr": 0.005, "memory": 838, "data_time": 0.04694, "loss_rpn_cls": 0.00327, "loss_rpn_bbox": 0.00032, "loss_cls": 0.01052, "acc": 99.70117, "loss_bbox": 0.00621, "loss": 0.02032, "grad_norm": 0.46293, "time": 0.12296}
{"mode": "train", "epoch": 5, "iter": 100, "lr": 0.005, "memory": 838, "data_time": 0.00253, "loss_rpn_cls": 0.00011, "loss_rpn_bbox": 0.0, "loss_cls": 0.00855, "acc": 99.83594, "loss_bbox": 0.00197, "loss": 0.01064, "grad_norm": 0.34849, "time": 0.07471}
{"mode": "train", "epoch": 5, "iter": 150, "lr": 0.005, "memory": 838, "data_time": 0.0026, "loss_rpn_cls": 0.00334, "loss_rpn_bbox": 0.00049, "loss_cls": 0.00537, "acc": 99.89844, "loss_bbox": 0.00121, "loss": 0.01041, "grad_norm": 0.27421, "time": 0.07643}
{"mode": "train", "epoch": 5, "iter": 200, "lr": 0.005, "memory": 838, "data_time": 0.00859, "loss_rpn_cls": 0.00014, "loss_rpn_bbox": 0.0, "loss_cls": 0.0077, "acc": 99.7793, "loss_bbox": 0.00407, "loss": 0.01191, "grad_norm": 0.42323, "time": 0.08209}
{"mode": "val", "epoch": 5, "iter": 454, "lr": 0.005, "mAP": 0.00289}
{"mode": "train", "epoch": 6, "iter": 50, "lr": 0.005, "memory": 838, "data_time": 0.04581, "loss_rpn_cls": 0.00132, "loss_rpn_bbox": 0.00015, "loss_cls": 0.0081, "acc": 99.77539, "loss_bbox": 0.00344, "loss": 0.01301, "grad_norm": 0.44049, "time": 0.12059}
{"mode": "train", "epoch": 6, "iter": 100, "lr": 0.005, "memory": 838, "data_time": 0.00261, "loss_rpn_cls": 0.00027, "loss_rpn_bbox": 0.0, "loss_cls": 0.00932, "acc": 99.75195, "loss_bbox": 0.00535, "loss": 0.01494, "grad_norm": 0.38333, "time": 0.07688}
{"mode": "train", "epoch": 6, "iter": 150, "lr": 0.005, "memory": 838, "data_time": 0.00391, "loss_rpn_cls": 0.00079, "loss_rpn_bbox": 9e-05, "loss_cls": 0.0088, "acc": 99.77148, "loss_bbox": 0.00505, "loss": 0.01473, "grad_norm": 0.38591, "time": 0.07949}
{"mode": "train", "epoch": 6, "iter": 200, "lr": 0.005, "memory": 838, "data_time": 0.00268, "loss_rpn_cls": 0.00024, "loss_rpn_bbox": 0.0, "loss_cls": 0.00904, "acc": 99.75, "loss_bbox": 0.00429, "loss": 0.01357, "grad_norm": 0.46512, "time": 0.07737}
{"mode": "val", "epoch": 6, "iter": 454, "lr": 0.005, "mAP": 0.03434}
{"mode": "train", "epoch": 7, "iter": 50, "lr": 0.005, "memory": 838, "data_time": 0.04855, "loss_rpn_cls": 0.00598, "loss_rpn_bbox": 0.00134, "loss_cls": 0.00735, "acc": 99.83398, "loss_bbox": 0.00421, "loss": 0.01888, "grad_norm": 0.42314, "time": 0.12309}
{"mode": "train", "epoch": 7, "iter": 100, "lr": 0.005, "memory": 838, "data_time": 0.00523, "loss_rpn_cls": 0.00042, "loss_rpn_bbox": 0.0, "loss_cls": 0.01376, "acc": 99.50977, "loss_bbox": 0.01822, "loss": 0.0324, "grad_norm": 0.59247, "time": 0.07889}
{"mode": "train", "epoch": 7, "iter": 150, "lr": 0.005, "memory": 838, "data_time": 0.00261, "loss_rpn_cls": 0.0015, "loss_rpn_bbox": 0.00019, "loss_cls": 0.01601, "acc": 99.48242, "loss_bbox": 0.02053, "loss": 0.03824, "grad_norm": 0.64349, "time": 0.07524}
{"mode": "train", "epoch": 7, "iter": 200, "lr": 0.005, "memory": 838, "data_time": 0.00246, "loss_rpn_cls": 0.00032, "loss_rpn_bbox": 0.0, "loss_cls": 0.01358, "acc": 99.5957, "loss_bbox": 0.01612, "loss": 0.03002, "grad_norm": 0.5457, "time": 0.07434}
{"mode": "val", "epoch": 7, "iter": 454, "lr": 0.005, "mAP": 0.03534}
{"mode": "train", "epoch": 8, "iter": 50, "lr": 0.005, "memory": 838, "data_time": 0.04567, "loss_rpn_cls": 0.00022, "loss_rpn_bbox": 0.0, "loss_cls": 0.01331, "acc": 99.54102, "loss_bbox": 0.0164, "loss": 0.02994, "grad_norm": 0.54978, "time": 0.11851}
{"mode": "train", "epoch": 8, "iter": 100, "lr": 0.005, "memory": 838, "data_time": 0.01258, "loss_rpn_cls": 0.00085, "loss_rpn_bbox": 0.00013, "loss_cls": 0.01299, "acc": 99.58789, "loss_bbox": 0.01721, "loss": 0.03117, "grad_norm": 0.47703, "time": 0.08733}
{"mode": "train", "epoch": 8, "iter": 150, "lr": 0.005, "memory": 838, "data_time": 0.00632, "loss_rpn_cls": 0.00147, "loss_rpn_bbox": 0.0003, "loss_cls": 0.01294, "acc": 99.61523, "loss_bbox": 0.01305, "loss": 0.02776, "grad_norm": 0.46348, "time": 0.07836}
{"mode": "train", "epoch": 8, "iter": 200, "lr": 0.005, "memory": 838, "data_time": 0.00274, "loss_rpn_cls": 0.00082, "loss_rpn_bbox": 3e-05, "loss_cls": 0.01297, "acc": 99.60156, "loss_bbox": 0.01596, "loss": 0.02978, "grad_norm": 0.44738, "time": 0.07614}
{"mode": "val", "epoch": 8, "iter": 454, "lr": 0.005, "mAP": 0.0516}
{"mode": "train", "epoch": 9, "iter": 50, "lr": 0.0005, "memory": 838, "data_time": 0.04539, "loss_rpn_cls": 0.00172, "loss_rpn_bbox": 0.00051, "loss_cls": 0.01006, "acc": 99.75391, "loss_bbox": 0.01104, "loss": 0.02333, "grad_norm": 0.3493, "time": 0.11941}
{"mode": "train", "epoch": 9, "iter": 100, "lr": 0.0005, "memory": 838, "data_time": 0.00265, "loss_rpn_cls": 0.00084, "loss_rpn_bbox": 0.00023, "loss_cls": 0.01186, "acc": 99.70312, "loss_bbox": 0.01461, "loss": 0.02753, "grad_norm": 0.37289, "time": 0.07824}
{"mode": "train", "epoch": 9, "iter": 150, "lr": 0.0005, "memory": 838, "data_time": 0.00541, "loss_rpn_cls": 0.00099, "loss_rpn_bbox": 0.00023, "loss_cls": 0.01627, "acc": 99.56836, "loss_bbox": 0.01991, "loss": 0.0374, "grad_norm": 0.48759, "time": 0.07987}
{"mode": "train", "epoch": 9, "iter": 200, "lr": 0.0005, "memory": 838, "data_time": 0.00239, "loss_rpn_cls": 0.00082, "loss_rpn_bbox": 1e-05, "loss_cls": 0.01436, "acc": 99.59375, "loss_bbox": 0.01721, "loss": 0.03241, "grad_norm": 0.43737, "time": 0.07782}
{"mode": "val", "epoch": 9, "iter": 454, "lr": 0.0005, "mAP": 0.08883}
{"mode": "train", "epoch": 10, "iter": 50, "lr": 0.0005, "memory": 838, "data_time": 0.04685, "loss_rpn_cls": 0.00152, "loss_rpn_bbox": 0.00045, "loss_cls": 0.01595, "acc": 99.62695, "loss_bbox": 0.01856, "loss": 0.03648, "grad_norm": 0.43505, "time": 0.13617}
{"mode": "train", "epoch": 10, "iter": 100, "lr": 0.0005, "memory": 838, "data_time": 0.00274, "loss_rpn_cls": 0.00013, "loss_rpn_bbox": 0.0, "loss_cls": 0.01753, "acc": 99.56445, "loss_bbox": 0.02329, "loss": 0.04096, "grad_norm": 0.47868, "time": 0.14107}
{"mode": "train", "epoch": 10, "iter": 150, "lr": 0.0005, "memory": 838, "data_time": 0.00624, "loss_rpn_cls": 0.0021, "loss_rpn_bbox": 0.00043, "loss_cls": 0.01719, "acc": 99.58984, "loss_bbox": 0.01635, "loss": 0.03607, "grad_norm": 0.47439, "time": 0.13143}
{"mode": "train", "epoch": 10, "iter": 200, "lr": 0.0005, "memory": 838, "data_time": 0.00616, "loss_rpn_cls": 0.0001, "loss_rpn_bbox": 0.0, "loss_cls": 0.01708, "acc": 99.55078, "loss_bbox": 0.02244, "loss": 0.03961, "grad_norm": 0.48892, "time": 0.13795}
{"mode": "val", "epoch": 10, "iter": 454, "lr": 0.0005, "mAP": 0.08099}
{"mode": "train", "epoch": 11, "iter": 50, "lr": 0.0005, "memory": 838, "data_time": 0.04696, "loss_rpn_cls": 0.00171, "loss_rpn_bbox": 0.00044, "loss_cls": 0.02097, "acc": 99.55859, "loss_bbox": 0.01935, "loss": 0.04247, "grad_norm": 0.50149, "time": 0.17843}
{"mode": "train", "epoch": 11, "iter": 100, "lr": 0.0005, "memory": 838, "data_time": 0.0041, "loss_rpn_cls": 8e-05, "loss_rpn_bbox": 0.0, "loss_cls": 0.02021, "acc": 99.51953, "loss_bbox": 0.02273, "loss": 0.04302, "grad_norm": 0.51068, "time": 0.12785}
{"mode": "train", "epoch": 11, "iter": 150, "lr": 0.0005, "memory": 838, "data_time": 0.0023, "loss_rpn_cls": 0.00062, "loss_rpn_bbox": 0.00017, "loss_cls": 0.02259, "acc": 99.45703, "loss_bbox": 0.02685, "loss": 0.05023, "grad_norm": 0.54681, "time": 0.13467}
{"mode": "train", "epoch": 11, "iter": 200, "lr": 0.0005, "memory": 838, "data_time": 0.00827, "loss_rpn_cls": 0.00251, "loss_rpn_bbox": 0.00041, "loss_cls": 0.02029, "acc": 99.53711, "loss_bbox": 0.02442, "loss": 0.04764, "grad_norm": 0.58001, "time": 0.13755}
{"mode": "val", "epoch": 11, "iter": 454, "lr": 0.0005, "mAP": 0.08189}
{"mode": "train", "epoch": 12, "iter": 50, "lr": 5e-05, "memory": 838, "data_time": 0.04621, "loss_rpn_cls": 0.00501, "loss_rpn_bbox": 0.00115, "loss_cls": 0.02017, "acc": 99.53906, "loss_bbox": 0.0222, "loss": 0.04852, "grad_norm": 0.5549, "time": 0.18221}
{"mode": "train", "epoch": 12, "iter": 100, "lr": 5e-05, "memory": 838, "data_time": 0.00233, "loss_rpn_cls": 0.00011, "loss_rpn_bbox": 0.0, "loss_cls": 0.02108, "acc": 99.49414, "loss_bbox": 0.02361, "loss": 0.0448, "grad_norm": 0.51906, "time": 0.139}
{"mode": "train", "epoch": 12, "iter": 150, "lr": 5e-05, "memory": 838, "data_time": 0.00231, "loss_rpn_cls": 0.00163, "loss_rpn_bbox": 0.00119, "loss_cls": 0.02002, "acc": 99.54297, "loss_bbox": 0.02183, "loss": 0.04466, "grad_norm": 0.51251, "time": 0.10229}
{"mode": "train", "epoch": 12, "iter": 200, "lr": 5e-05, "memory": 838, "data_time": 0.00265, "loss_rpn_cls": 0.00055, "loss_rpn_bbox": 8e-05, "loss_cls": 0.01799, "acc": 99.54102, "loss_bbox": 0.02444, "loss": 0.04305, "grad_norm": 0.4537, "time": 0.13379}
{"mode": "val", "epoch": 12, "iter": 454, "lr": 5e-05, "mAP": 0.08164}
